#ifndef IOP_CONFIGURATION_HPP
#define IOP_CONFIGURATION_HPP

#include "driver/io.hpp"
#include "driver/thread.hpp"
#include "driver/log.hpp"
#include "utils.hpp"

namespace config {
/// Minimum log level to print a message (if serial is enabled)
constexpr static auto logLevel = iop::LogLevel::INFO;

constexpr static driver::gpio::Pin soilTemperature = gpio::Pin::D5;
constexpr static driver::gpio::Pin airTempAndHumidity = gpio::Pin::D6;
constexpr static driver::gpio::Pin soilResistivityPower = gpio::Pin::D7;
constexpr static driver::io::Pin factoryResetButton = gpio::Pin::D1;

/// Version of DHT (Digital Humidity and Temperature) sensor. (ex: DHT11 or
/// DHT21 or DHT22...)
constexpr static uint8_t dhtVersion = 22; // DHT22

/// Time between measurements
constexpr static iop::esp_time interval = 180 * 1000;

/// The fields bellow should be empty. Filling them will be counter productive
/// It's only here to speedup some debugging
///
/// If you really want to, do like above

[[maybe_unused]]
static auto wifiNetworkName() -> std::optional<iop::StaticString> {
    return nullopt;
}
[[maybe_unused]]
static auto wifiPassword() -> std::optional<iop::StaticString> {
    return nullopt;
}

[[maybe_unused]]
static auto iopEmail() -> std::optional<iop::StaticString> {
    return nullopt;
}
[[maybe_unused]]
static auto iopPassword() -> std::optional<iop::StaticString> {
    return nullopt;
}

/// It should be prefixed with https in production.
/// Do not use plain http in production!
///
/// But if using plain http: Undefine IOP_SSL otherwise it won't work
[[maybe_unused]]
static auto uri() -> iop::StaticString {
    #ifdef IOP_DESKTOP
    return IOP_STATIC_STRING("http://127.0.0.1:4001");
    #else
    return IOP_STATIC_STRING("https://iop-monitor-server.tk:4001");
    #endif
}
}

#endif